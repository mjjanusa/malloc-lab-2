////////////////////////////////////////////////////////////////
/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    void *temp;
    size_t tempsize;
    size_t copySize;
    
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(oldptr)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(oldptr)));
    size_t size_prev = GET_SIZE(HDRP(oldptr));
    size_t change = size - size_prev;
    
    
    if (size == 0){	//if size is equal to zero, the call is equivalent to mm free(ptr)
	mm_free(ptr);
    	newptr = 0;
    	return NULL;
    }
    if (oldptr == NULL)	//if ptr is NULL, the call is equivalent to mm malloc(size)
	return mm_malloc(size);    
    if(change < 0 && (size_prev - size) > (2*DSIZE)){ // if shrinking ptr and released space will be large enough to be a block
    	 PUT(HDRP(oldptr), PACK(size, 1)); // resize old 
	 PUT(FTRP(oldptr), PACK(size, 1)); // resize old
	 newptr = oldptr; // set new ptr to old ptr
	 oldptr =  (NEXT_BLKP(newptr)); // reset old pointer to the new (empty) block
	 PUT(HDRP(oldptr), PACK(size_prev - size - DSIZE, 0));
	 PUT(FTRP(oldptr), PACK(size_prev - size - DSIZE, 0));
	//add oldptr to free list
	add_free_list(oldptr);
	//coalesce
	coalesce(oldptr);
	return newptr;
    }
    if(change < 0 || change == 0) {//if shrinking ptr and released space to small to be a block or size is the same return same ptr
    	    return ptr;
    }
    else { // size is greater than before
    	    //if next is unallocated and combining next with this block would fufill new size requirement merge the blocks
    	    if(next_alloc == 0 && ((GET_SIZE(FTRP(NEXT_BLKP(oldptr)))) + size_prev + DSIZE) >= size){
    	    	    temp = NEXT_BLKP(oldptr);
    	    	    tempsize = GET_SIZE(FTRP(temp));
    	    	    //remove next block from the free list
    	    	    remove_free_list(temp);	    	    
    	    	    if((tempsize + size_prev + DSIZE) < (size + 2*DSIZE)) // if not big enough for new free block make new block take all space
    	    	    	 size = tempsize + size_prev + DSIZE;
    	    	    PUT(HDRP(oldptr), PACK(size, 1)); // resize old 
    	    	    PUT(FTRP(oldptr), PACK(size, 1)); // resize old 
    	    	    
    	    	    if((tempsize + size_prev + DSIZE) < (size + 2*DSIZE)){ //if new free block initialize it
			    newptr = NEXT_BLKP(oldptr); // set new pointer to the new (empty) block
			    PUT(HDRP(newptr), PACK(tempsize + size_prev - size, 0));
			    PUT(FTRP(newptr), PACK(tempsize + size_prev - size, 0));
			    //add newptr to free list
			    add_free_list(newptr);
    	    	    }
    	    	    return oldptr;    	    	    
    	    }    	
    	    //if prev is unallocated and combining prev with this block would fufill new size requirement merge the blocks
    	    else if(prev_alloc == 0 && ((GET_SIZE(FTRP(PREV_BLKP(oldptr)))) + size_prev + DSIZE) >= size){ 
    	    	    
    	    }
    	    //if next and prev are unallocated and combining the three blocks would fufill new size requirement merge blocks.
    	    else if (next_alloc == 0 && prev_alloc == 0 && ((GET_SIZE(FTRP(NEXT_BLKP(oldptr)))) + size_prev + DSIZE + (GET_SIZE(FTRP(PREV_BLKP(oldptr)))) + size_prev + DSIZE) >= size){
    	    	  
    	    	    
    	    }
    	    // if next and previous blocks are allocated
    	    newptr = mm_malloc(size);
    	    copySize = GET_SIZE(HDRP(oldptr));
	    if (size < copySize)
		    copySize = size;
	    //copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
	    memcpy(newptr, oldptr, copySize);
	    mm_free(oldptr);
	    return newptr;
    }
}
